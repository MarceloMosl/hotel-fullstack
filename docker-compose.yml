services:
  db:
    image: postgres
    container_name: db
    restart: always #container reinicia se morrer
    ports:
      - 5433:5432
    env_file:
      - ./hotel-back-end/.env #configurar POSTGRES_USER, POSTGRES_PASSWORD e POSTGRES_DB
    volumes:
    - pg:/var/lib/postgresql/data # onde os dados do postgres ficam armazenados no sistema operacional

  api:
    container_name: api
    build: ./hotel-back-end #Dockerfile do node se encontra na pasta atual
    ports:
      - 4000:4000
    depends_on:
      - db # s√≥ sobe quando o postgres tiver no ar
    env_file:
      - ./hotel-back-end/.env #configurar DATABASE_URL

  spa:
    container_name: spa # nome do container do react
    build: ./hotel-front-end # builda e move os arquivos para o volume react
    volumes: 
     - react-volume:/var/www/html
  
  nginx:
    container_name: nginx # nome do container
    build: ./nginx # busca os arquivos no diretorio apontado no Dockerfile e cria um servidor web
    ports:
      - 8080:80 # 8080 externo 80 interno
    volumes: 
     - react-volume:/var/www/html
    depends_on:
      - db
      - api
      - spa   





volumes:
  pg: # volume para os postgres
  react-volume: # volume para o react e nginx